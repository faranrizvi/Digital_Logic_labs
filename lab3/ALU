module part3(SW, KEY, LEDR, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, VAR);

	input [9:0]SW;
	input [3:0]KEY;
	output [9:0]LEDR;
	output [6:0] HEX0;
	output [6:0] HEX1;
	output [6:0] HEX2;
	output [6:0] HEX3;
	output [6:0] HEX4;
	output [6:0] HEX5;
	output [4:0] VAR;
	
	alu u0(SW[7:4], SW[3:0], KEY[2:0], LEDR[7:0], VAR[4:0]);
	
	hexdisplay hex0(SW[0], SW[1], SW[2], SW[3], HEX0[0], HEX0[1], HEX0[2], HEX0[3], HEX0[4], HEX0[5], HEX0[6]);
	hexdisplay hex2(SW[4], SW[5], SW[6], SW[7], HEX2[0], HEX2[1], HEX2[2], HEX2[3], HEX2[4], HEX2[5], HEX2[6]);
	hexdisplay hex4(LEDR[0], LEDR[1], LEDR[2], LEDR[3], HEX4[0], HEX4[1], HEX4[2], HEX4[3], HEX4[4], HEX4[5], HEX4[6]);
	hexdisplay hex5(LEDR[4], LEDR[5], LEDR[6], LEDR[7], HEX5[0], HEX5[1], HEX5[2], HEX5[3], HEX5[4], HEX5[5], HEX5[6]);
	hexdisplay hex1(0,0,0,0, HEX1[0], HEX1[1], HEX1[2], HEX1[3], HEX1[4], HEX1[5], HEX1[6]);
	hexdisplay hex3(0,0,0,0, HEX3[0], HEX3[1], HEX3[2], HEX3[3], HEX3[4], HEX3[5], HEX3[6]);

endmodule

module alu(A, B, func, ALUout, VAR);

	input [3:0]A, B;
	input [2:0]func;
	output reg [7:0]ALUout;
	output [4:0] VAR;
	
	rippleAdder u0(A[3:0], B[3:0], 0, VAR[4], VAR[3:0]);
	
	always@(*)
	begin
		case(func)
			3'b000: ALUout = {3'b000, VAR}; 
			3'b001: ALUout = A + B;
			3'b010: ALUout = {4'b0000, B};
			3'b011: ALUout = ((A[0] + A[1] + A[2] + A[3] == 1'b1)||(B[0] + B[1] + B[2] + B[3] == 1'b1))? 8'b00000001:8'b00000000;
			3'b100: ALUout = ((A[0] * A[1] * A[2] * A[3] == 1'b1)&&(B[0] * B[1] * B[2] * B[3] == 1'b1))? 8'b00000001:8'b00000000;
			3'b101: ALUout = {A,B};
			default: ALUout = 8'b00000000;
		endcase
	end
endmodule

module rippleAdder(A, B, Cin, Cout, S);

	input [3:0]A, B;
	input Cin;
	output Cout;
	output [3:0]S;
	
	wire c1, c2, c3;
	
	fullAdder u0(A[0], B[0], Cin, c1, S[0]);
	fullAdder u1(A[1], B[1], c1, c2, S[1]);
	fullAdder u2(A[2], B[2], c2, c3, S[2]);
	fullAdder u3(A[3], B[3], c3, Cout, S[3]);
	
	
endmodule

module fullAdder(X, Y, Cinput, Coutput, Sum);

	input X, Y, Cinput;
	output Coutput, Sum;
	
	assign Coutput = (X & Y) | (Cinput & X) | (Cinput & Y);
	assign Sum = X ^ Y ^ Cinput;
endmodule

module hexdisplay(input c0, c1, c2, c3, output S0, S1, S2, S3, S4, S5, S6);
		assign S0 = (~c3 & ~c2 & ~c1 & c0) | (~c3 & c2 & ~c1 & ~c0) | (c3 &
							~c2 & c1 & c0) | (c3 & c2 & ~c1 & c0);
		assign S1 = (~c3 & c2 & ~c1 & c0) | (~c3 & c2 & c1 & ~c0) | (c3 &
							~c2 & c1 & c0) | (c3 & c2 & ~c1 & ~c0) | (c3 & c2 & c1 & ~c0) | (c3 &
							c2 & c1 & c0);
		assign S2 = (~c3 & ~c2 & c1 & ~c0) | (c3 & c2 & ~c1 & ~c0) | (c3 &
							c2 & c1 & ~c0) | (c3 & c2 & c1 & c0);
		assign S3 = (~c3 & ~c2 & ~c1 & c0) | (~c3 & c2 & ~c1 & ~c0) | (~c3
							& c2 & c1 & c0) | (c3 & ~c2 & ~c1 & c0) | (c3 & ~c2 & c1 & ~c0) | (c3
							& c2 & c1 & c0);
		assign S4 = (~c3 & ~c2 & ~c1 & c0) | (~c3 & ~c2 & c1 & c0) | (~c3 &
							c2 & ~c1 & ~c0) | (~c3 & c2 & ~c1 & c0) | (~c3 & c2 & c1 & c0) | (c3 &
							~c2 & ~c1 & c0);
		assign S5 = (~c3 & ~c2 & ~c1 & c0) | (~c3 & ~c2 & c1 & ~c0) | (~c3
							& ~c2 & c1 & c0) | (~c3 & c2 & c1 & c0) | (c3 & c2 & ~c1 & c0);
		assign S6 = (~c3 & ~c2 & ~c1 & ~c0) | (~c3 & ~c2 & ~c1 & c0) | (~c3
							& c2 & c1 & c0) | (c3 & c2 & ~c1 & ~c0);
endmodule
